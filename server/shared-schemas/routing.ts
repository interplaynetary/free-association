import { z } from 'zod';

/**
 * Flow metadata returned by router
 */
export const FlowMetadataSchema = z.object({
  name: z.string(),
  requestType: z.string(),
  description: z.string()
});

export type FlowMetadata = z.infer<typeof FlowMetadataSchema>;

/**
 * Prompt configuration generated by flows
 */
export const PromptConfigSchema = z.object({
  system: z.string().optional(),
  user: z.string(),
  temperature: z.number().optional(),
  maxTokens: z.number().optional()
});

export type PromptConfig = z.infer<typeof PromptConfigSchema>;

/**
 * Routing response from LLM Router
 * OpenRouter-only response format
 */
export const RoutingResponseSchema = z.object({
  success: z.boolean(),
  model: z.string(), // OpenRouter model name (provider/model)
  provider: z.literal('openrouter'), // Always OpenRouter
  key: z.string(), // OpenRouter API key
  flow: FlowMetadataSchema.optional(),
  promptConfig: PromptConfigSchema.optional(),
  selection: z.object({
    category: z.string(),
    reason: z.string()
  }).optional()
});

export type RoutingResponse = z.infer<typeof RoutingResponseSchema>;

/**
 * Key health status for key pool
 */
export const KeyHealthStatus = z.enum([
  'healthy',
  'degraded',
  'failed',
  'rate_limited',
  'depleted'
]);

export type KeyHealthStatus = z.infer<typeof KeyHealthStatus>;

/**
 * Health report to key pool
 */
export const HealthReportSchema = z.object({
  key: z.string(),
  status: KeyHealthStatus,
  error: z.string().nullable().optional(),
  cost: z.number().nullable().optional()
});

export type HealthReport = z.infer<typeof HealthReportSchema>;

/**
 * Key pool response when requesting a key
 */
export const KeyResponseSchema = z.object({
  success: z.boolean(),
  model: z.string(),
  key: z.string(),
  pool: z.object({
    totalKeys: z.number(),
    healthyKeys: z.number()
  })
});

export type KeyResponse = z.infer<typeof KeyResponseSchema>;

