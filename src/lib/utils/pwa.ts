// @ts-expect-error - virtual module generated by vite-plugin-pwa
import { registerSW } from 'virtual:pwa-register';
import toast from 'svelte-french-toast';

/**
 * Unregister all service workers (useful for clearing old ones in dev)
 */
export async function unregisterServiceWorkers() {
	if (!('serviceWorker' in navigator)) return;
	
	const registrations = await navigator.serviceWorker.getRegistrations();
	for (const registration of registrations) {
		await registration.unregister();
		console.log('[PWA] Unregistered service worker:', registration.scope);
	}
}

let updateSW: ((reloadPage?: boolean) => Promise<void>) | undefined;

/**
 * Register service worker and handle updates
 */
export function registerServiceWorker() {
	if (!('serviceWorker' in navigator)) {
		console.log('[PWA] Service Worker not supported');
		return;
	}

	// Skip registration in development
	if (import.meta.env.DEV) {
		console.log('[PWA] Development mode - service worker disabled');
		// Unregister any existing service workers in dev
		unregisterServiceWorkers();
		return;
	}

	// Register using vite-pwa's virtual module
	updateSW = registerSW({
		immediate: true,
		onNeedRefresh() {
			console.log('[PWA] New content available, showing update prompt');
			showUpdatePrompt();
		},
		onOfflineReady() {
			console.log('[PWA] App ready to work offline');
			toast.success('App ready to work offline!', { duration: 3000 });
		},
		onRegistered(registration: ServiceWorkerRegistration | undefined) {
			console.log('[PWA] Service Worker registered:', registration?.scope);
			// Check for updates periodically (every hour)
			if (registration) {
				setInterval(() => {
					registration.update();
				}, 60 * 60 * 1000);
			}
		},
		onRegisterError(error: Error) {
			console.error('[PWA] Service Worker registration failed:', error);
		}
	});
}

/**
 * Show update prompt to user
 */
function showUpdatePrompt() {
	let currentToastId: string;
	
	// Create a container for the custom toast UI
	const createToastContent = () => {
		const container = document.createElement('div');
		container.style.cssText = 'display: flex; flex-direction: column; gap: 8px;';
		container.innerHTML = `
			<div style="font-weight: 600;">New Version Available</div>
			<div style="font-size: 14px; color: #666;">A new version of Playnet is ready to install.</div>
			<div style="display: flex; gap: 8px; margin-top: 8px;">
				<button 
					id="pwa-update-btn"
					style="padding: 8px 16px; background: #000; color: #fff; border: none; border-radius: 6px; cursor: pointer; font-weight: 500;"
				>
					Update Now
				</button>
				<button 
					id="pwa-dismiss-btn"
					style="padding: 8px 16px; background: #f3f4f6; color: #374151; border: none; border-radius: 6px; cursor: pointer;"
				>
					Later
				</button>
			</div>
		`;
		
		// Attach event listeners
		setTimeout(() => {
			container.querySelector('#pwa-update-btn')?.addEventListener('click', () => {
				updateServiceWorker();
				if (currentToastId) toast.dismiss(currentToastId);
			});
			container.querySelector('#pwa-dismiss-btn')?.addEventListener('click', () => {
				if (currentToastId) toast.dismiss(currentToastId);
			});
		}, 0);
		
		return container;
	};
	
	// Show toast with custom HTML element
	currentToastId = toast.custom(
		createToastContent() as any,
		{
			duration: Infinity,
			position: 'top-center'
		}
	);
}

/**
 * Update the service worker (skip waiting and reload)
 */
export function updateServiceWorker() {
	if (!updateSW) {
		console.error('[PWA] Update function not available');
		return;
	}

	// Trigger update and reload
	updateSW(true);
}

/**
 * Dismiss update notification
 */
export function dismissUpdateNotification(toastId: string) {
	toast.dismiss(toastId);
}

// Make functions available globally for toast buttons
declare global {
	interface Window {
		pwaUpdate: () => void;
		pwaDismiss: (toastId: string) => void;
	}
}

if (typeof window !== 'undefined') {
	window.pwaUpdate = updateServiceWorker;
	window.pwaDismiss = dismissUpdateNotification;
}

